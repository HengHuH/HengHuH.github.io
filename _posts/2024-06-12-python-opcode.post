---
title: Python 函数调用优化
date: 2024-06-12
---

<h1>Python 函数调用优化</h1>

<p>现在，我参与的项目中，逻辑实体的初始化等生命周期过程被拆分到多个签名相同的函数中实现。这些子函数会在运行时被收集到容器中，在逻辑实体初始化时，一次性调用，完成实体的初始化过程。当函数数量多时，Python
    函数调用开销高的因素不能被忽略。例如一次调用10微妙，一百次则有1毫秒的开销。接下来讨论一种在字节码层面合并函数的方法，可以降低多函数调用的开销。</p>

<p>接下来介绍具体的实现，基于 Python 3.11 和之后的版本。之前的版本 opcode 和 bytecode 会有差别，但大体思路相同。</p>

<p><a href="https://docs.python.org/zh-cn/3.11/library/dis.html">dis</a> 模块能反汇编字节码，通过这个模块，可以用来显示函数的反汇编内容。3.0 版本后，CPython
    的字节码发生了几点重要改变：
<ul>
    <li>每条指令使用2个字节</li>
    <li>跳转，异常处理，循环指令的参数使用指令偏移量而不是字节偏移量</li>
    <li>有些指令带有一个或多个内联缓存条目，采用 CACHE 指令的形式</li>
</ul>
types.CodeType 可以动态创建字节码对象，types.FunctionType 可以动态创建函数对象。
</p>
<p>有了以上工具，可以把集合中的子函数的 __code__, __globals__, __defaults__, __closure__，以一定规则合并起来，再创建出新的函数对象。也就是完成了函数在字节码层面的合并。</p>

<p><a href="https://www.baidu.com">这里看具体实现</a></p>